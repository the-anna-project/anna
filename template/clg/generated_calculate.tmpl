package {{.PackageName}}

// This file is generated by the CLG generator. Don't edit it manually. The CLG
// generator is invoked by go generate. For more information about the usage of
// the CLG generator check https://github.com/xh3b4sd/clggen or have a look at
// the clg package. There is the go generate statement placed to invoke clggen.

import (
  "github.com/xh3b4sd/anna/log"
  "github.com/xh3b4sd/anna/service"
  "github.com/xh3b4sd/anna/service/id"
  servicespec "github.com/xh3b4sd/anna/service/spec"
  systemspec "github.com/xh3b4sd/anna/spec"
  "github.com/xh3b4sd/anna/storage"
  storagespec "github.com/xh3b4sd/anna/storage/spec"
)

const (
  // ObjectType represents the object type of the CLG object. This is used e.g.
  // to register itself to the logger.
  ObjectType systemspec.ObjectType = "{{.CLGName}}-clg"
)

// Config represents the configuration used to create a new CLG object.
type Config struct {
  // Dependencies.
  ServiceCollection servicespec.Collection
  Log               systemspec.Log
  StorageCollection storagespec.Collection
}

// DefaultConfig provides a default configuration to create a new CLG object by
// best effort.
func DefaultConfig() Config {
  newConfig := Config{
    // Dependencies.
    ServiceCollection: service.MustNewCollection(),
    Log:               log.New(log.DefaultConfig()),
    StorageCollection: storage.MustNewCollection(),
  }

  return newConfig
}

// New creates a new configured CLG object.
func New(config Config) (systemspec.CLG, error) {
  newCLG := &clg{
    Config: config,
    ID:     id.MustNewID(),
    Name:   "{{.CLGName}}",
    Type:   ObjectType,
  }

  // Dependencies.
  if newCLG.ServiceCollection == nil {
    return nil, maskAnyf(invalidConfigError, "factory collection must not be empty")
  }
  if newCLG.Log == nil {
    return nil, maskAnyf(invalidConfigError, "logger must not be empty")
  }
  if newCLG.StorageCollection == nil {
    return nil, maskAnyf(invalidConfigError, "storage collection must not be empty")
  }

  newCLG.Log.Register(newCLG.GetType())

  return newCLG, nil
}

// MustNew creates either a new default configured CLG object, or panics.
func MustNew() systemspec.CLG {
  newCLG, err := New(DefaultConfig())
  if err != nil {
    panic(err)
  }

  return newCLG
}

type clg struct {
  Config

  ID string
  Name string
  Type systemspec.ObjectType
}

func (c *clg) Service() servicespec.Collection {
  return c.ServiceCollection
}

func (c *clg) GetCalculate() interface{} {
  return c.calculate
}

func (c *clg) GetName() string {
  return c.Name
}

func (c *clg) SetServiceCollection(serviceCollection servicespec.Collection) {
  c.ServiceCollection = serviceCollection
}

func (c *clg) SetLog(log systemspec.Log) {
  c.Log = log
}

func (c *clg) SetStorageCollection(storageCollection storagespec.Collection) {
  c.StorageCollection = storageCollection
}

func (c *clg) Storage() storagespec.Collection {
  return c.StorageCollection
}
