package sum

// This file is generated by the CLG generator. Don't edit it manually. The CLG
// generator is invoked by go generate. For more information about the usage of
// the CLG generator check https://github.com/xh3b4sd/clggen or have a look at
// the clg package. There is the go generate statement placed to invoke clggen.

import (
	"reflect"
	"testing"

	"github.com/xh3b4sd/anna/spec"
)

type testErrorNetworkPayload struct {
	GetContextError error
	ID              spec.ObjectID
	SetArgsError    error
}

func (p *testErrorNetworkPayload) GetArgs() []reflect.Value {
	return nil
}

func (p *testErrorNetworkPayload) GetContext() (spec.Context, error) {
	return nil, p.GetContextError
}

func (p *testErrorNetworkPayload) GetDestination() spec.ObjectID {
	return ""
}

func (p *testErrorNetworkPayload) GetID() spec.ObjectID {
	return p.ID
}

func (p *testErrorNetworkPayload) GetSources() []spec.ObjectID {
	return nil
}

func (p *testErrorNetworkPayload) SetArgs(args []reflect.Value) error {
	return p.SetArgsError
}

func (p *testErrorNetworkPayload) String() string {
	return ""
}

func (p *testErrorNetworkPayload) Validate() error {
	return nil
}

func Test_CLG_injectValues_Error_GetContext(t *testing.T) {
	testNetworkPayload := &testErrorNetworkPayload{
		GetContextError: invalidConfigError,
		ID:              "foo",
		SetArgsError:    nil,
	}
	var testValues []reflect.Value

	_, err := injectValues(testNetworkPayload, testValues)
	if !IsInvalidConfig(err) {
		t.Fatal("expected", true, "got", false)
	}
}

func Test_CLG_injectValues_Error_SetArgs(t *testing.T) {
	testNetworkPayload := &testErrorNetworkPayload{
		GetContextError: nil,
		ID:              "foo",
		SetArgsError:    invalidConfigError,
	}
	var testValues []reflect.Value

	_, err := injectValues(testNetworkPayload, testValues)
	if !IsInvalidConfig(err) {
		t.Fatal("expected", true, "got", false)
	}
}

func Test_CLG_injectValues_NetworkPayload(t *testing.T) {
	testNetworkPayload := &testErrorNetworkPayload{
		GetContextError: nil,
		ID:              "foo",
		SetArgsError:    nil,
	}
	var testValues []reflect.Value

	newNetworkPayload, err := injectValues(testNetworkPayload, testValues)
	if err != nil {
		t.Fatal("expected", nil, "got", err)
	}

	testID := newNetworkPayload.GetID()
	if testID != spec.ObjectID("foo") {
		t.Fatal("expected", "foo", "got", testID)
	}
}
